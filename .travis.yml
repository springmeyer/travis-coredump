language: python

env:
  matrix:
    # These must match one of the lines from `python-build --definitions`
    #- PYTHON=2.6.9  ## 2.6 doesn't have the gdb tools
    - PYTHON=2.7.8
    - PYTHON=3.3.6
    - PYTHON=3.4.2

before_install:
 # install the gnu debugger for later use in reading the core file
 - sudo apt-get -y install gdb
 # use pyenv to build a debug version of python
 - sudo python-build --keep --debug $PYTHON /opt/python/${PYTHON}-dbg
 # The cpython source tree has useful gdb tools that make its core dumps readable
 - PYTHON_GDBTOOLS=$(ls -1rdt /tmp/python-build.*/Python-$PYTHON/Tools/gdb/ | head -1)


 # make a virtualenv for the -dbg interpreter
 - virtualenv --python /opt/python/${PYTHON}-dbg/bin/python virtualenv/python${PYTHON}-dbg
 - source virtualenv/python${PYTHON}-dbg/bin/activate
 - pip install virtualenv

before_script:
 # What is the current file size max for core files?
 # It is usually 0, which means no core file will be dumped if there is a crash
 - ulimit -Hc  # hard limit
 - ulimit -Sc  # soft limit
 - python-build --definitions  # show available pythons

script:
 # Run the program to prompt a crash
 - bash -c 'ulimit -Sc unlimited && source ./repro.sh'
 # Now we check for a core file and dump the backtrace out
 - >
    find -regex '.*/core\(\.[0-9]+\)?' |
    xargs -rn1 --verbose
    gdb $(which python)
    -ex "python import sys; sys.path.append('$PYTHON_GDBTOOLS'); import libpython; reload(libpython)"
    -ex "thread apply all py-bt"
    -ex "thread apply all bt"
    -batch
